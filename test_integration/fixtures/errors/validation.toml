[[test]]
name = "DuplicateCol"
query = """
--! new_author(id?, id?)
INSERT INTO Author (id, name) VALUES (:id, :id);
"""
error = """
× the field `id` is declared null multiple time
   ╭─[queries/test.sql:1:1]
 1 │ --! new_author(id?, id?)
   ·                ─┬   ─┬
   ·                 │    ╰── redeclared here
   ·                 ╰── previous nullity declaration
 2 │ INSERT INTO Author (id, name) VALUES (:id, :id);
   ╰────
  help: remove one of the two declaration"""

[[test]]
name = "ColumnAlreadyNullable"
query = """
--! author: (id?, name?, id?)
SELECT * FROM author;
"""
error = """
× the field `id` is declared null multiple time
   ╭─[queries/test.sql:1:1]
 1 │ --! author: (id?, name?, id?)
   ·              ─┬          ─┬
   ·               │           ╰── redeclared here
   ·               ╰── previous nullity declaration
 2 │ SELECT * FROM author;
   ╰────
  help: remove one of the two declaration"""

[[test]]
name = "UnknownColumnName"
query = """
--! author: (age?)
SELECT * FROM author;
"""
error = """
× unknown field
   ╭─[queries/test.sql:1:1]
 1 │ --! author: (age?)
   ·              ─┬─
   ·               ╰── no field with this name was found
 2 │ SELECT * FROM author;
   ╰────
  help: use one of those names: id, name"""

[[test]]
name = "UnknownParamsName"
query = """
--! new_author (age?)
INSERT INTO Author (id, name) VALUES (:id, :name);
"""
error = """
× unknown field
   ╭─[queries/test.sql:1:1]
 1 │ --! new_author (age?)
   ·                 ─┬─
   ·                  ╰── no field with this name was found
 2 │ INSERT INTO Author (id, name) VALUES (:id, :name);
   ╰────
  help: use one of those names: id, name"""

[[test]]
name = "QueryAlreadyExists"
query = """
--! author_id
SELECT id FROM Author;
--! author_id
SELECT id FROM Author;
"""
error = """
× the query `author_id` is defined multiple time
   ╭─[queries/test.sql:1:1]
 1 │ --! author_id
   ·     ────┬────
   ·         ╰── previous definition here
 2 │ SELECT id FROM Author;
 3 │ --! author_id
   ·     ────┬────
   ·         ╰── redefined here
 4 │ SELECT id FROM Author;
   ╰────
  help: use a different name for one of those"""

[[test]]
name = "TypeAlreadyExists"
query = """
--: Row()
--: Row(name?)
"""
error = """
× the type `Row` is defined multiple time
   ╭─[queries/test.sql:1:1]
 1 │ --: Row()
   ·     ─┬─
   ·      ╰── previous definition here
 2 │ --: Row(name?)
   ·     ─┬─
   ·      ╰── redefined here
   ╰────
  help: use a different name for one of those"""

[[test]]
name = "InlineConflictDeclaredRow"
query = """
--: Row()
--! author_name_inline: Row()
SELECT name FROM Author;
--! author_name_named: Row
SELECT name FROM Author;
"""
error = """
× the row `Row` is defined multiple time
   ╭─[queries/test.sql:1:1]
 1 │ --: Row()
   ·     ─┬─
   ·      ╰── previous definition here
 2 │ --! author_name_inline: Row()
   ·                         ─┬─
   ·                          ╰── redefined here
 3 │ SELECT name FROM Author;
   ╰────
  help: use a different name for one of those"""

[[test]]
name = "InlineConflictDeclaredParam"
query = """
--: Param()
--! new_author_inline Param()
INSERT INTO Author (id, name) VALUES (:id, :name);
--! new_author_named Param
INSERT INTO Author (id, name) VALUES (:id, :name);
"""
error = """
× the param `Param` is defined multiple time
   ╭─[queries/test.sql:1:1]
 1 │ --: Param()
   ·     ──┬──
   ·       ╰── previous definition here
 2 │ --! new_author_inline Param()
   ·                       ──┬──
   ·                         ╰── redefined here
 3 │ INSERT INTO Author (id, name) VALUES (:id, :name);
   ╰────
  help: use a different name for one of those"""

[[test]]
name = "UnknownNamedRow"
query = """
--! author: Author
SELECT * FROM author;
"""
error = """
× reference to an unknown named row `Author`
   ╭─[queries/test.sql:1:1]
 1 │ --! author: Author
   ·             ───┬──
   ·                ╰── unknown named row
 2 │ SELECT * FROM author;
   ╰────
  help: declare an inline named type using `()`: Author()"""

[[test]]
name = "UnknownNamedParam"
query = """
--! new_author Param
INSERT INTO Author (id, name) VALUES (:id, :name);
"""
error = """
× reference to an unknown named param `Param`
   ╭─[queries/test.sql:1:1]
 1 │ --! new_author Param
   ·                ──┬──
   ·                  ╰── unknown named param
 2 │ INSERT INTO Author (id, name) VALUES (:id, :name);
   ╰────
  help: declare an inline named type using `()`: Param()"""

[[test]]
name = "NamedTypeMissingColumn"
query = """
--: Row()
--! author_names: Row
SELECT name FROM Author;
--! author_ids: Row
SELECT id FROM Author;
"""
error = """
× conflicting uses of named type `Row`
   ╭─[queries/test.sql:1:1]
 1 │ --: Row()
 2 │ --! author_names: Row
   ·                   ─┬─
   ·                    ╰── column `name` expected here
 3 │ SELECT name FROM Author;
 4 │ --! author_ids: Row
   ·                 ─┬─
   ·                  ╰── column `name` not found
 5 │ SELECT id FROM Author;
   ╰────
  help: use a different named type for each query"""

[[test]]
name = "NamedTypeMissingColumn2"
query = """
--: Row()
--! author_names: Row
SELECT name FROM Author;
--! author: Row
SELECT name, id FROM Author;
"""
error = """
× conflicting uses of named type `Row`
   ╭─[queries/test.sql:1:1]
 1 │ --: Row()
 2 │ --! author_names: Row
   ·                   ─┬─
   ·                    ╰── column `id` not found
 3 │ SELECT name FROM Author;
 4 │ --! author: Row
   ·             ─┬─
   ·              ╰── column `id` expected here
 5 │ SELECT name, id FROM Author;
   ╰────
  help: use a different named type for each query"""

[[test]]
name = "NamedTypeWrongColumnType"
query = """
--: Row()
--! author_names: Row
SELECT name FROM Author;
--! author_ids: Row
SELECT id as name FROM Author;
"""
error = """
× conflicting uses of named type `Row`
   ╭─[queries/test.sql:1:1]
 1 │ --: Row()
 2 │ --! author_names: Row
   ·                   ─┬─
   ·                    ╰── column `name` has type `text` here
 3 │ SELECT name FROM Author;
 4 │ --! author_ids: Row
   ·                 ─┬─
   ·                  ╰── but here it has type `int4`
 5 │ SELECT id as name FROM Author;
   ╰────
  help: use a different named type for each query"""

[[test]]
name = "ImplicitExecuteRow"
query = """
--! delete: (name?)
DELETE FROM author;
"""
error = """
× the query `delete` declare a row but return nothing
   ╭─[queries/test.sql:1:1]
 1 │ --! delete: (name?)
   ·             ───┬───
   ·                ╰── row declared here
 2 │ DELETE FROM author;
   · ─────────┬─────────
   ·          ╰── but query return nothing
   ╰────
  help: remove row declaration"""

[[test]]
name = "RowOnExecute"
query = """
--! delete: Row()
DELETE FROM author;
"""
error = """
× the query `delete` declare a row but return nothing
   ╭─[queries/test.sql:1:1]
 1 │ --! delete: Row()
   ·             ──┬──
   ·               ╰── row declared here
 2 │ DELETE FROM author;
   · ─────────┬─────────
   ·          ╰── but query return nothing
   ╰────
  help: remove row declaration"""

[[test]]
name = "ParamOnSimpleQuery"
query = """
--! delete Param()
DELETE FROM author;
"""
error = """
× the query `delete` declares a parameter but has no binding
   ╭─[queries/test.sql:1:1]
 1 │ --! delete Param()
   ·            ───┬───
   ·               ╰── parameter declared here
 2 │ DELETE FROM author;
   · ─────────┬─────────
   ·          ╰── but query has no binding
   ╰────
  help: remove parameter declaration"""

[[test]]
name = "QueryReserved"
query = """
--! crate
SELECT * FROM author;
"""
error = """
× `crate` is a reserved rust keyword that cannot be escaped
   ╭─[queries/test.sql:1:1]
 1 │ --! crate
   ·     ──┬──
   ·       ╰── reserved rust keyword
 2 │ SELECT * FROM author;
   ╰────
  help: use a different name"""

[[test]]
name = "TypeReserved"
query = """
--! select: Self()
SELECT * FROM author;
"""
error = """
× `Self` is a reserved rust keyword that cannot be escaped
   ╭─[queries/test.sql:1:1]
 1 │ --! select: Self()
   ·             ──┬─
   ·               ╰── reserved rust keyword
 2 │ SELECT * FROM author;
   ╰────
  help: use a different name"""

[[test]]
name = "NameReserved"
query = """
--! query
SELECT id, name as _ FROM author;
"""
error = """
× `_` is a reserved rust keyword that cannot be escaped
   ╭─[queries/test.sql:1:1]
 1 │ --! query
   ·     ──┬──
   ·       ╰── from row declared here
 2 │ SELECT id, name as _ FROM author;
   ╰────
  help: use a different name"""
